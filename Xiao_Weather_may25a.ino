#include "arduino_secrets.h"

/* 
  Sketch generated by the Arduino IoT Cloud Thing "Untitled 2"
  https://create.arduino.cc/cloud/things/8b2c66c8-a852-4a0b-8370-59ef00bcc282 

  Arduino IoT Cloud Variables description

  The following variables are automatically generated and updated when changes are made to the Thing

  String xiao_19_comfort;
  float xiao_19_depoint;
  float xiao_19_heatindex;
  float xiao_19_humidity;
  float xiao_19_temperature;

  Variables which are marked as READ/WRITE in the Cloud Thing will also have functions
  which are called when their values are changed from the Dashboard.
  These functions are generated with the Thing and added at the end of this sketch.
*/

#include "thingProperties.h"
#include "DHTesp.h"                                // Click here to get the library: http://librarymanager/All#DHTesp
#include <SerLCD.h>                                // Click here to get the library: http://librarymanager/All#SparkFun_SerLCD

//SerLCD lcd;                                        // Initialize the library with default I2C address 0x72
DHTesp dht;                                        // Initialize the sensor

#define dhtPin A2                                  // pin for DHT
#define BAUD 9600                                  // serial monitor BAUD rate

int delay_time = 3000;

ComfortState cf;                                   // ComfortState is returned by the DHT11 sensor

bool getTemperature() {
  // Reading temperature for humidity takes about 250 milliseconds!
  // Sensor readings may also be up to 2 seconds 'old' (it's a very slow sensor)
  TempAndHumidity newValues = dht.getTempAndHumidity();
  // Check if any reads failed and exit early (to try again).
  if (dht.getStatus() != 0) {
    Serial.println("DHT11 error status: " + String(dht.getStatusString()));

    //lcd.clear();
    //lcd.setCursor(0,0);
    //lcd.print("DHT11 error:");
    //lcd.setCursor(0,1);
    //lcd.print(String(dht.getStatusString()));

    delay(delay_time);

    return false;
  }

  // call functions from DHT11
  float heatindex = dht.computeHeatIndex(newValues.temperature, newValues.humidity);
  float dewpoint = dht.computeDewPoint(newValues.temperature, newValues.humidity);
  float cr = dht.getComfortRatio(cf, newValues.temperature, newValues.humidity);

  // get comfortStatus from DHT11 and use Select function to determine String
  String comfortStatus;
  switch(cf) {
    case Comfort_OK:
      comfortStatus = "       OK";
      break;
    case Comfort_TooHot:
      comfortStatus = "    Too Hot";
      break;
    case Comfort_TooCold:
      comfortStatus = "    Too Cold";
      break;
    case Comfort_TooDry:
      comfortStatus = "    Too Dry";
      break;
    case Comfort_TooHumid:
      comfortStatus = "   Too Humid";
      break;
    case Comfort_HotAndHumid:
      comfortStatus = "  Hot And Humid";
      break;
    case Comfort_HotAndDry:
      comfortStatus = "  Hot And Dry";
      break;
    case Comfort_ColdAndHumid:
      comfortStatus = " Cold And Humid";
      break;
    case Comfort_ColdAndDry:
      comfortStatus = " Cold And Dry";
      break;
    default:
      comfortStatus = "   Unknown:";
      break;
  };
 
  // print results to Monitor
  Serial.println(" TMP:" + String(newValues.temperature) + " HUM:" + String(newValues.humidity) + " HIX:" + String(heatindex) + " DEW:" + String(dewpoint) + " " + comfortStatus);
	
  // store results in IOT variables
	
  xiao_19_temperature = newValues.temperature;
  xiao_19_humidity = newValues.humidity;
  xiao_19_comfort = comfortStatus;
  xiao_19_depoint = dewpoint;
  xiao_19_heatindex = heatindex;
  
  // show on display
  //lcd.clear();
  //lcd.setCursor(2,0);
  //lcd.print("TEMP: " + String(xiao_19_temperature) + "C");
  //lcd.setCursor(2,1);
  //lcd.print("HUM : " + String(xiao_19_humidity) + "%");
  
	return true;

}

void setup() {
  // Initialize serial and wait for port to open:
  Serial.begin(9600);
  // This delay gives the chance to wait for a Serial Monitor without blocking if none is found
  delay(1500); 

  dht.setup(dhtPin, DHTesp::DHT11);

  // Defined in thingProperties.h
  initProperties();

  // Connect to Arduino IoT Cloud
  ArduinoCloud.begin(ArduinoIoTPreferredConnection);
  
  /*
     The following function allows you to obtain more information
     related to the state of network and IoT Cloud connection and errors
     the higher number the more granular information youâ€™ll get.
     The default is 0 (only errors).
     Maximum is 4
 */
  setDebugMessageLevel(2);
  ArduinoCloud.printDebugInfo();

 Serial.println("DHT ESP32 example with tasks");

  Wire.begin();                 // to communicate with the DHT11
  //lcd.begin(Wire);              // Set up the LCD for I2C communication
  //lcd.setBacklight(0,0,255);    // blue background colour

  // Print a messages to the LCD.
  //lcd.setCursor(3,0);
  //lcd.print("Welcome !");
  //lcd.setCursor(2,1);
  //lcd.print("Arduino IOT");

  delay(delay_time);

  Serial.println("Ready");
  Serial.print("IP address: ");
  Serial.println(WiFi.localIP());

  //lcd.clear();
  //lcd.setCursor(0,0);
  //lcd.print("Connected:");
  //lcd.setCursor(0,1);
  //lcd.print(WiFi.localIP());

  delay(delay_time);

}

void loop() {

  getTemperature();           // get data from DHT11

  ArduinoCloud.update();

  delay(delay_time);

  // Temperature data is displayed from getTemperature() function

  // display data
  //lcd.clear();
  //lcd.setCursor(2,0);
  //lcd.print("HIDX: " + String(xiao_19_heatindex) + "C");
  //lcd.setCursor(2,1);
  //lcd.print("DEWP: " + String(xiao_19_depoint) + "C");
  
  delay(delay_time);
  
  //lcd.clear();
  //lcd.setCursor(1,0);
  //lcd.print("Comfort Status");
  //lcd.setCursor(0,1);
  //lcd.print(xiao_19_comfort);

  
  delay(delay_time);

}








